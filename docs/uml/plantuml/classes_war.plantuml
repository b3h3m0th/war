@startuml classes_war
set namespaceSeparator none
class "Card" as models.card.Card {
  rank
  suit
  from_dict(data: dict) -> Card
  to_dict() -> dict
}
class "Deck" as models.deck.Deck {
  NEW_DECK_ORDER_SUITS : list
  cards : Optional[list[Card]]
  deal(amount: int) -> list[Card]
  from_dict(data: dict) -> Deck
  get_new_deck_order_cards() -> list[Card]
  shuffle(cards: list[Card]) -> list[Card]
  to_dict() -> dict
}
class "Game" as models.game.Game {
  deck
  players : list
  rounds : list
  variant
  from_dict(data: dict) -> Turn
  print_results()
  start() -> None
  to_dict() -> dict
}
class "Player" as models.player.Player {
  isNpc : bool
  name : str
  from_dict(data: dict) -> Player
  to_dict() -> dict
}
class "Rank" as enums.rank.Rank {
  name
  from_dict(data: dict) -> Rank
  to_dict() -> dict
}
class "Round" as models.round.Round {
  turns : list[Turn]
  from_dict(data: dict) -> Turn
  get_winning_turns() -> list[Turn]
  to_dict() -> dict
}
class "Serializer" as utils.serializer.Serializer {
  load(cls, path: Path | str) -> object
  save(obj: object, path: Path | str) -> None
}
class "Shell" as models.shell.Shell {
  data_path : str
  game
  intro : str
  prompt : str
  default(line)
  {abstract}do_load() -> None
  do_new(arg) -> None
  do_quit(arg) -> bool
  do_rules(arg) -> None
  print_menu() -> None
}
class "Suit" as enums.suit.Suit {
  name
  from_dict(data: dict) -> Suit
  to_dict() -> dict
}
class "Turn" as models.turn.Turn {
  card
  player
  from_dict(data: dict) -> Turn
  to_dict() -> dict
}
class "Variant" as enums.variant.Variant {
  name
}
models.deck.Deck --* models.game.Game : deck
models.game.Game --* models.shell.Shell : game
enums.rank.Rank --o models.card.Card : rank
enums.suit.Suit --o models.card.Card : suit
enums.variant.Variant --o models.game.Game : variant
models.card.Card --o models.turn.Turn : card
models.player.Player --o models.turn.Turn : player
@enduml
